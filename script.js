let currentLang = "ru";
let currentTheme = null;
let currentWordIndex = 0;
let correctAnswers = 0;
let shuffledWords = [];
let selectedOption = null;
let isIncorrectSelected = false;
let mistakes = new Set(); // –ò—Å–ø–æ–ª—å–∑—É–µ–º Set –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –æ—à–∏–±–æ–∫

const themeSelection = document.getElementById("theme-selection");
const testContainer = document.querySelector(".test-container");
const questionWord = document.getElementById("question-word");
const description = document.getElementById("description");
const imageContainer = document.getElementById("image-container");
const optionsDiv = document.getElementById("options");
const progress = document.getElementById("progress");
const stopBtn = document.getElementById("stop-test");
const dontKnowBtn = document.getElementById("dont-know");
const nextBtn = document.getElementById("next-question");
const restartBtn = document.getElementById("back-to-start");
const resultsDiv = document.querySelector(".results");
const scoreDisplay = document.getElementById("score");
const mistakesTableBody = document.querySelector("#mistakes-table tbody");
const title = document.getElementById("title");
const themesTitle = document.getElementById("themes-title");
const resultsTitle = document.getElementById("results-title");

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —è–∑—ã–∫–∞
document.querySelectorAll(".lang-btn").forEach(btn => {
    btn.addEventListener("click", () => {
        document.querySelector(".lang-btn.active").classList.remove("active");
        btn.classList.add("active");
        currentLang = btn.dataset.lang;
        updateLanguageButtons();
        updateButtonText();
        updateTitle();
        updateThemeButtonsText();
        updateTableHeaders();
        if (testContainer.style.display === "block") loadQuestion();
        if (resultsDiv.style.display === "block") showResults();
    });
});

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞
function updateTitle() {
    const titles = {
        ru: "–ò–∑—É—á–µ–Ω–∏–µ —Å–ª–æ–≤ –ø–æ –∫–∞—Ä–∞—Ç–µü•ã",
        ge: "·Éô·Éê·É†·Éê·É¢·Éò·É° ·É°·Éò·É¢·Éß·Éï·Éî·Éë·Éò·É° ·É®·Éî·É°·É¨·Éê·Éï·Éö·Éêü•ã",
        en: "Learning Karate Wordsü•ã"
    };
    title.textContent = titles[currentLang];
    themesTitle.textContent = {
        ru: "–°–ø–∏—Å–æ–∫ —Ç–µ–º",
        ge: "·Éó·Éî·Éõ·Éî·Éë·Éò·É° ·É°·Éò·Éê",
        en: "List of Topics"
    }[currentLang];
    resultsTitle.textContent = resultsTitle.getAttribute(`data-text-${currentLang}`);
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ —Ç–∞–±–ª–∏—Ü—ã
function updateTableHeaders() {
    const headers = document.querySelectorAll("#mistakes-table th");
    headers.forEach(header => {
        header.textContent = header.getAttribute(`data-text-${currentLang}`);
    });
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤ –∫–Ω–æ–ø–æ–∫ —è–∑—ã–∫–∞
function updateLanguageButtons() {
    document.querySelectorAll(".lang-btn").forEach(btn => {
        if (btn.dataset.lang === currentLang) {
            btn.classList.remove("btn-secondary");
            btn.classList.add("btn-success");
        } else {
            btn.classList.remove("btn-success");
            btn.classList.add("btn-secondary");
        }
    });
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–æ–∫ —Ç–µ–º
function updateThemeButtonsText() {
    document.querySelectorAll(".theme-btn").forEach(btn => {
        btn.textContent = btn.getAttribute(`data-text-${currentLang}`);
    });
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–æ–∫
function updateButtonText() {
    stopBtn.textContent = stopBtn.getAttribute(`data-text-${currentLang}`);
    dontKnowBtn.textContent = dontKnowBtn.getAttribute(`data-text-${currentLang}`);
    nextBtn.textContent = nextBtn.getAttribute(`data-text-${currentLang}`);
    restartBtn.textContent = restartBtn.getAttribute(`data-text-${currentLang}`);
}

// –í—ã–±–æ—Ä —Ç–µ–º—ã
document.querySelectorAll(".theme-btn").forEach(btn => {
    btn.addEventListener("click", () => {
        currentTheme = btn.dataset.theme;
        shuffledWords = currentTheme === "–ü–æ–ª–Ω—ã–π —ç–∫–∑–∞–º–µ–Ω" ?
            [...words].sort(() => Math.random() - 0.5) :
            [...words].filter(word => word.theme === currentTheme).sort(() => Math.random() - 0.5);
        currentWordIndex = 0;
        correctAnswers = 0;
        mistakes.clear(); // –û—á–∏—â–∞–µ–º Set –æ—à–∏–±–æ–∫
        selectedOption = null;
        isIncorrectSelected = false;
        testContainer.style.display = "block";
        themeSelection.style.display = "none";
        resultsDiv.style.display = "none";
        loadQuestion();
        nextBtn.style.display = "none";
        dontKnowBtn.style.display = "block";
        updateButtonText();
        updateTitle();
    });
});

// –ó–∞–≥—Ä—É–∑–∫–∞ –≤–æ–ø—Ä–æ—Å–∞
function loadQuestion() {
    if (currentWordIndex >= shuffledWords.length) {
        showResults();
        return;
    }

    const word = shuffledWords[currentWordIndex];
    // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    imageContainer.innerHTML = word.image ? `<img src="${word.image}" alt="${word.japanese}" class="img-fluid">` : "";
    progress.textContent = `${currentWordIndex + 1} / ${shuffledWords.length}`;
    questionWord.textContent = word.japanese; // –Ø–ø–æ–Ω—Å–∫–æ–µ —Å–ª–æ–≤–æ (–∏–µ—Ä–æ–≥–ª–∏—Ñ)
    description.textContent = word.translation[currentLang]; // –û–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —è–∑—ã–∫–µ

    const options = generateOptions(word);
    optionsDiv.innerHTML = "";
    options.forEach(opt => {
        const btn = document.createElement("button");
        btn.textContent = opt;
        btn.classList.add("btn", "btn-outline-secondary", "w-100", "mb-2", "d-block", "mx-auto");
        btn.addEventListener("click", () => selectOption(opt, word));
        optionsDiv.appendChild(btn);
    });
    nextBtn.style.display = "none";
    dontKnowBtn.style.display = "block";
    stopBtn.style.display = "block";
    selectedOption = null;
    isIncorrectSelected = false;
    resetOptionColors();
    updateLanguageButtons();
    updateButtonText();
    updateTitle();
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞ (–≤–∞—Ä–∏–∞–Ω—Ç—ã ‚Äî —ç—Ç–æ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —è–∑—ã–∫–µ)
function generateOptions(correctWord) {
    const options = [correctWord.transcription[currentLang]];
    while (options.length < 5) {
        const randomWord = words[Math.floor(Math.random() * words.length)];
        const transcription = randomWord.transcription[currentLang];
        if (!options.includes(transcription) && randomWord.theme === correctWord.theme) {
            options.push(transcription);
        }
    }
    return options.sort(() => Math.random() - 0.5);
}

// –í—ã–±–æ—Ä –≤–∞—Ä–∏–∞–Ω—Ç–∞
function selectOption(selected, correctWord) {
    selectedOption = selected;
    const isCorrect = selected === correctWord.transcription[currentLang];
    resetOptionColors();
    const buttons = optionsDiv.querySelectorAll("button");
    buttons.forEach(btn => {
        if (btn.textContent === selected) {
            if (isCorrect) {
                btn.classList.remove("btn-outline-secondary");
                btn.classList.add("btn-success");
                nextBtn.style.display = "block"; // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º "–î–∞–ª–µ–µ" —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –≤–µ—Ä–Ω–æ–º –æ—Ç–≤–µ—Ç–µ
                dontKnowBtn.style.display = "none"; // –°–∫—Ä—ã–≤–∞–µ–º "–ù–µ –∑–Ω–∞—é" –ø—Ä–∏ –≤–µ—Ä–Ω–æ–º –æ—Ç–≤–µ—Ç–µ
            } else {
                btn.classList.remove("btn-outline-secondary");
                btn.classList.add("btn-danger");
                isIncorrectSelected = true;
                dontKnowBtn.style.display = "block"; // "–ù–µ –∑–Ω–∞—é" –æ—Å—Ç–∞–µ—Ç—Å—è –≤–∏–¥–∏–º—ã–º –ø—Ä–∏ –æ—à–∏–±–∫–µ
                nextBtn.style.display = "none"; // "–î–∞–ª–µ–µ" –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏ –æ—à–∏–±–∫–µ
                mistakes.add(correctWord.japanese); // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –æ–¥–∏–Ω —Ä–∞–∑
            }
        }
    });
    if (isCorrect) {
        correctAnswers++;
    }
    updateLanguageButtons();
    updateButtonText();
    updateTitle();
}

// –°–±—Ä–æ—Å —Ü–≤–µ—Ç–æ–≤ –∫–Ω–æ–ø–æ–∫
function resetOptionColors() {
    const buttons = optionsDiv.querySelectorAll("button");
    buttons.forEach(btn => {
        btn.classList.remove("btn-success", "btn-danger");
        btn.classList.add("btn-outline-secondary");
    });
}

// –ö–Ω–æ–ø–∫–∞ "–î–∞–ª–µ–µ"
nextBtn.addEventListener("click", () => {
    if (selectedOption && (selectedOption === shuffledWords[currentWordIndex].transcription[currentLang] || isIncorrectSelected)) {
        currentWordIndex++;
        if (currentWordIndex < shuffledWords.length) {
            loadQuestion();
        } else {
            showResults();
        }
    }
    updateLanguageButtons();
    updateButtonText();
    updateTitle();
});

// –ö–Ω–æ–ø–∫–∞ "–ù–µ –∑–Ω–∞—é"
dontKnowBtn.addEventListener("click", () => {
    const word = shuffledWords[currentWordIndex];
    mistakes.add(word.japanese); // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –æ–¥–∏–Ω —Ä–∞–∑
    resetOptionColors();
    const buttons = optionsDiv.querySelectorAll("button");
    buttons.forEach(btn => {
        if (btn.textContent === word.transcription[currentLang]) {
            btn.classList.remove("btn-outline-secondary");
            btn.classList.add("btn-success");
        }
    });
    dontKnowBtn.style.display = "none"; // –°–∫—Ä—ã–≤–∞–µ–º "–ù–µ –∑–Ω–∞—é"
    nextBtn.style.display = "block"; // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º "–î–∞–ª–µ–µ" –≤–º–µ—Å—Ç–æ "–ù–µ –∑–Ω–∞—é"
    stopBtn.style.display = "block";
    isIncorrectSelected = true;
    selectedOption = word.transcription[currentLang];
    updateLanguageButtons();
    updateButtonText();
    updateTitle();
});

// –ö–Ω–æ–ø–∫–∞ "–°—Ç–æ–ø"
stopBtn.addEventListener("click", () => {
    testContainer.style.display = "none";
    resultsDiv.style.display = "block";
    themeSelection.style.display = "none";
    showResults(); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å —Ç–∞–±–ª–∏—Ü–µ–π –æ—à–∏–±–æ–∫
    selectedOption = null;
    isIncorrectSelected = false;
    updateLanguageButtons();
    updateButtonText();
    updateTitle();
});

// –ü–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
function showResults() {
    testContainer.style.display = "none";
    resultsDiv.style.display = "block";
    scoreDisplay.textContent = {
        ru: `–ü—Ä–∞–≤–∏–ª—å–Ω–æ: ${correctAnswers}, –û—à–∏–±–æ–∫: ${mistakes.size}`,
        ge: `·É°·É¨·Éù·É†·Éò: ${correctAnswers}, ·É®·Éî·É™·Éì·Éù·Éõ·Éî·Éë·Éò: ${mistakes.size}`,
        en: `Correct: ${correctAnswers}, Mistakes: ${mistakes.size}`
    }[currentLang];
    mistakesTableBody.innerHTML = "";
    const mistakeWords = words.filter(word => mistakes.has(word.japanese));
    mistakeWords.forEach(m => {
        const row = document.createElement("tr");
        row.innerHTML = `
            <td class="text-center">${m.japanese}</td>
            <td class="text-center">${m.transcription[currentLang]}</td>
            <td class="text-center">${m.translation[currentLang]}</td>
        `;
        mistakesTableBody.appendChild(row);
    });
    updateLanguageButtons();
    updateButtonText();
    updateTitle();
    updateTableHeaders();
}

// –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –Ω–∞—á–∞–ª–æ
restartBtn.addEventListener("click", () => {
    resultsDiv.style.display = "none";
    themeSelection.style.display = "block";
    testContainer.style.display = "none";
    currentTheme = null;
    currentWordIndex = 0;
    correctAnswers = 0;
    mistakes.clear();
    selectedOption = null;
    isIncorrectSelected = false;
    updateLanguageButtons();
    updateButtonText();
    updateTitle();
});
